{"version":3,"sources":["../node_modules/@emoji-mart/data/i18n sync /^/.*/.json$","config/ChatLogics.js","Context/ChatProvider.js","components/PersonalProfile.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/ImagePreviewModel.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/ProfileModal.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","components/Authentication/Login.js","components/Authentication/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","name","getSenderImage","_users$2","pic","getSenderFull","formatLastSeen","lastSeen","currentDate","Date","lastSeenDate","timeDifference","seconds","Math","floor","minutes","hours","days","monthName","getMonth","concat","getFullYear","ampmTime","timestamp","date","getHours","getMinutes","ampm","getDate","_date","today","yesterday","setDate","dayNames","isSameDay","date1","date2","diffInDays","getDay","dd","String","padStart","mm","yy","toString","slice","ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","PersonalProfileModal","isOpen","onOpen","onClose","useDisclosure","_jsxs","_Fragment","onClick","Modal","size","ModalOverlay","ModalContent","ModalBody","Image","src","alt","style","margin","padding","display","width","ScrollableChat","ScrollableFeed","overflowY","height","showDate","createdAt","textAlign","color","fontSize","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","isPic","marginLeft","marginTop","maxWidth","boxSize","borderRadius","Text","alignSelf","backgroundColor","content","Box","p","bgGradient","boxShadow","Flex","justifyContent","mb","fontWeight","pb","fontFamily","colorScheme","UserBadgeItem","handleFunction","admin","Badge","px","py","variant","CloseIcon","pl","UserListItem","bg","_hover","background","w","d","alignItems","email","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","loading","setLoading","renameloading","setRenameLoading","toast","useToast","handleAddUser","async","find","u","user1","title","status","duration","isClosable","position","groupAdmin","config","headers","Authorization","token","data","axios","put","chatId","error","description","response","message","handleRemove","IconButton","base","icon","ViewIcon","isCentered","ModalHeader","chatName","ModalCloseButton","flexDir","flexWrap","FormControl","Input","placeholder","onChange","target","Button","ml","isLoading","query","get","handleSearch","Spinner","ModalFooter","ImagePreviewModel","selectedImage","setSelectedImage","fileInputRef","sendImage","handleClose","current","onOverlayClick","URL","createObjectURL","maxH","maxW","objectFit","socket","selectedChatCompare","SingleChat","setMessages","imageloading","setImageLoading","newMessage","setNewMessage","useRef","emit","io","on","cleanup","disconnect","window","addEventListener","removeEventListener","newMessageRecieved","chat","includes","md","ArrowBackIcon","isGroupChat","toUpperCase","align","justify","flex","isActive","h","className","onKeyDown","event","key","post","isRequired","flexDirection","document","getElementById","click","AttachmentIcon","type","accept","ref","handleImageUpload","file","files","EmojiInput","text","cleanOnEnter","FormData","append","res","fetch","method","body","then","json","catch","err","console","log","url","Chatbox","borderWidth","ChatLoading","showLoading","setShowLoading","timer","setTimeout","clearTimeout","Stack","Array","_","index","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","handleGroup","userToAdd","stringify","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","prevNotifications","notificationChat","selectChatFunc","latestMessage","substring","notif","_notif$sender","_chat$latestMessage","_chat$latestMessage$s","_notif$chat","_notif$sender2","_chat$latestMessage2","_chat$latestMessage2$","_notif$chat2","reduce","latestCreatedAt","_notif$sender3","_chat$latestMessage3","_chat$latestMessage3$","_notif$chat3","totalCount","ProfileModal","isEditing","setEditing","editedName","setEditedName","selectedFile","setSelectedFile","previewURL","setPreviewURL","picLoading","setPicLoading","borderBottom","EditIcon","handleEditClick","opacity","zIndex","left","top","right","mx","_res","setItem","location","reload","SideDrawer","loadingChat","setLoadingChat","accessChat","c","HStack","spacing","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","MenuItem","n","as","ChevronDownIcon","MenuDivider","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","isLogin","driver","steps","element","popover","side","allowClose","drive","Login","show","setShow","setEmail","password","setPassword","Container","centerContent","VStack","FormLabel","InputGroup","InputRightElement","handleClick","textDecorationLine","Signup","emailLoading","setEmailLoading","setName","otp","setOtp","sentOtp","setSentsetOtp","confirmpassword","setConfirmpassword","setPic","otpIcon","setOtpIcon","countdown","setCountdown","timerIdRef","resetCountdown","clearInterval","randomNumericOTP","generateNumericOTP","minDigit","random","emailRegex","CheckIcon","isDisabled","test","success","setInterval","prevCountdown","pics","postDetails","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter"],"mappings":"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","file":"static/js/main.de0214bd.chunk.js","sourcesContent":["var map = {\n\t\"./ar.json\": 193,\n\t\"./be.json\": 194,\n\t\"./cs.json\": 195,\n\t\"./de.json\": 196,\n\t\"./en.json\": 197,\n\t\"./es.json\": 198,\n\t\"./fa.json\": 199,\n\t\"./fi.json\": 200,\n\t\"./fr.json\": 201,\n\t\"./hi.json\": 202,\n\t\"./it.json\": 203,\n\t\"./ja.json\": 204,\n\t\"./kr.json\": 205,\n\t\"./nl.json\": 206,\n\t\"./pl.json\": 207,\n\t\"./pt.json\": 208,\n\t\"./ru.json\": 209,\n\t\"./sa.json\": 210,\n\t\"./tr.json\": 211,\n\t\"./uk.json\": 212,\n\t\"./vi.json\": 213,\n\t\"./zh.json\": 214\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 192;","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderImage = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].pic : users[0].pic;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n\r\nexport const formatLastSeen = (lastSeen) => {\r\n  const currentDate = new Date();\r\n  const lastSeenDate = new Date(lastSeen);\r\n\r\n  // Calculate the time difference in milliseconds\r\n  const timeDifference = currentDate - lastSeenDate;\r\n  const seconds = Math.floor(timeDifference / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n  const months = Math.floor(days / 30);\r\n\r\n  if (months >= 1) {\r\n    // More than one month ago\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n\r\n    const monthName = monthNames[lastSeenDate.getMonth()];\r\n    return `${monthName} ${lastSeenDate.getFullYear()}`;\r\n  } else if (days > 1) {\r\n    // More than one day ago\r\n    return `${days} days ago`;\r\n  } else if (days === 1) {\r\n    // Yesterday\r\n    return \"Yesterday\";\r\n  } else if (hours >= 1) {\r\n    // Today\r\n    return `${hours} hours ago`;\r\n  } else if (minutes >= 1) {\r\n    // Within the last hour\r\n    return `${minutes} minutes ago`;\r\n  } else {\r\n    // Within the last minute\r\n    return \"Just now\";\r\n  }\r\n};\r\n\r\nexport const ampmTime = (timestamp) => {\r\n  // Create a new Date object from the UTC timestamp\r\n  const date = new Date(timestamp);\r\n  // Extract hours and minutes\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n\r\n  // Determine AM/PM and format the time\r\n  const ampm = hours >= 12 ? \"pm\" : \"am\";\r\n  const formattedHours = hours % 12 || 12; // Convert 0 to 12 for 12-hour format\r\n  // Create the formatted time string\r\n  return `${formattedHours}:${minutes < 10 ? \"0\" : \"\"}${minutes} ${ampm}`;\r\n};\r\n\r\nexport const getDate = (date) => {\r\n  const _date = new Date(date);\r\n  const today = new Date();\r\n  const yesterday = new Date(today);\r\n  yesterday.setDate(today.getDate() - 1);\r\n\r\n  const dayNames = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  const isSameDay = (date1, date2) =>\r\n    date1.getDate() === date2.getDate() &&\r\n    date1.getMonth() === date2.getMonth() &&\r\n    date1.getFullYear() === date2.getFullYear();\r\n\r\n  const diffInDays = Math.floor((today - _date) / (1000 * 60 * 60 * 24));\r\n\r\n  if (isSameDay(_date, today)) {\r\n    return \"Today\";\r\n  } else if (isSameDay(_date, yesterday)) {\r\n    return \"Yesterday\";\r\n  } else if (diffInDays < 7 && _date < today) {\r\n    return dayNames[_date.getDay()];\r\n  } else {\r\n    const dd = String(_date.getDate()).padStart(2, \"0\");\r\n    const mm = String(_date.getMonth() + 1).padStart(2, \"0\");\r\n    const yy = _date.getFullYear().toString().slice(-2);\r\n    return `${dd}/${mm}/${yy}`;\r\n  }\r\n};\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n    if (!userInfo) history.push(\"/login\");\r\n    else history.push(\"/chats\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalBody,\r\n  Image,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst PersonalProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? <span onClick={onOpen}>{children}</span> : \"\"}\r\n      <Modal onClose={onClose} isOpen={isOpen} size=\"md\">\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalBody>\r\n            <Image\r\n              src={user}\r\n              alt=\"Profile Image\"\r\n              style={{\r\n                margin: \"0\",\r\n                padding: \"0\",\r\n                display: \"block\",\r\n                width: \"100%\",\r\n              }}\r\n            />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PersonalProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  ampmTime,\r\n  getDate,\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { Image, Box, Text, Flex } from \"@chakra-ui/react\";\r\nimport PersonalProfileModal from \"./PersonalProfile\";\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed style={{ overflowY: \"auto\", height: \"400px\" }}>\r\n      {messages.length > 0 ? (\r\n        messages.map((m, i) => {\r\n          const showDate =\r\n            i === 0 ||\r\n            getDate(messages[i - 1].createdAt) !== getDate(m.createdAt);\r\n          return (\r\n            <div key={m._id}>\r\n              {showDate && (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      display: \"block\",\r\n                      textAlign: \"center\",\r\n                      color: \"gray\",\r\n                      fontSize: \"10px\",\r\n                      margin: \"10px 0\",\r\n                    }}\r\n                  >\r\n                    {getDate(m.createdAt)}\r\n                  </div>\r\n                </>\r\n              )}\r\n              <div style={{ display: \"flex\" }}>\r\n                {(isSameSender(messages, m, i, user._id) ||\r\n                  isLastMessage(messages, i, user._id)) && (\r\n                  <Tooltip\r\n                    label={m.sender.name}\r\n                    placement=\"bottom-start\"\r\n                    hasArrow\r\n                  >\r\n                    <Avatar\r\n                      mt=\"7px\"\r\n                      mr={1}\r\n                      size=\"sm\"\r\n                      cursor=\"pointer\"\r\n                      name={m.sender.name}\r\n                      src={m.sender.pic}\r\n                    />\r\n                  </Tooltip>\r\n                )}\r\n                {!m.isPic ? (\r\n                  <>\r\n                    <span\r\n                      style={{\r\n                        backgroundColor: `${\r\n                          m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                        }`,\r\n                        marginLeft: isSameSenderMargin(\r\n                          messages,\r\n                          m,\r\n                          i,\r\n                          user._id\r\n                        ),\r\n                        marginTop: isSameUser(messages, m, i, user._id)\r\n                          ? 3\r\n                          : 10,\r\n                        borderRadius: \"20px\",\r\n                        padding: \"5px 15px\",\r\n                        maxWidth: \"75%\",\r\n                      }}\r\n                    >\r\n                      {m.content}\r\n                    </span>\r\n                    <Text fontSize=\"xs\" color=\"gray.500\" alignSelf={\"flex-end\"}>\r\n                      {ampmTime(m.createdAt)}\r\n                    </Text>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <span\r\n                      style={{\r\n                        marginLeft: isSameSenderMargin(\r\n                          messages,\r\n                          m,\r\n                          i,\r\n                          user._id\r\n                        ),\r\n                        marginTop: isSameUser(messages, m, i, user._id)\r\n                          ? 3\r\n                          : 10,\r\n                        maxWidth: \"100%\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    >\r\n                      <PersonalProfileModal user={m.pic}>\r\n                        <Image\r\n                          boxSize=\"md\"\r\n                          borderRadius=\"20px\"\r\n                          src={m.pic}\r\n                          alt=\"Send Image\"\r\n                          width={\"300px\"}\r\n                          height={\"300px\"}\r\n                          margin=\"0\"\r\n                          padding=\"0\"\r\n                          display=\"block\"\r\n                        />\r\n                      </PersonalProfileModal>\r\n                    </span>\r\n                    <Text fontSize=\"xs\" color=\"gray.500\" alignSelf={\"flex-end\"}>\r\n                      {ampmTime(m.createdAt)}\r\n                    </Text>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })\r\n      ) : (\r\n        <Box\r\n          p={\"40\"}\r\n          bgGradient=\"linear-gradient(to right, white,#e8e8e8 )\"\r\n          borderRadius=\"md\"\r\n          boxShadow=\"md\"\r\n          color=\"gray\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          textAlign=\"center\"\r\n        >\r\n          <Flex justifyContent={\"center\"}>\r\n            <Image\r\n              src=\"Favicon.png\"\r\n              alt=\"ChatApp Logo\"\r\n              boxSize=\"150px\"\r\n              mb={4}\r\n            />\r\n            <Text\r\n              fontSize=\"4xl\"\r\n              fontWeight={\"extrabold\"}\r\n              pb={3}\r\n              fontFamily=\"Work Sans\"\r\n              color=\"#32ccfe\"\r\n            >\r\n              ChatApp\r\n            </Text>\r\n          </Flex>\r\n          <Box mt={4} colorScheme=\"teal\" size=\"sm\">\r\n            Hello there! 👋 Welcome to our chat platform. We're excited to chat\r\n            with you!\r\n          </Box>\r\n          <Text mt={4}>\r\n            Let's have an amazing conversation. Start by saying hello!\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import React from \"react\";\r\nimport {\r\n  ModalOverlay,\r\n  Modal,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  Button,\r\n  ModalBody,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ImagePreviewModel = ({\r\n  isOpen,\r\n  onClose,\r\n  selectedImage,\r\n  setSelectedImage,\r\n  fileInputRef,\r\n  sendImage,\r\n  loading,\r\n}) => {\r\n  const handleClose = () => {\r\n    setSelectedImage(null); // Set selectedImage to null\r\n    onClose(); // Close the modal\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose} onOverlayClick={handleClose}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader textAlign=\"center\" fontSize=\"2xl\">\r\n          Preview Image\r\n        </ModalHeader>\r\n        <ModalBody justifyContent=\"center\">\r\n          {selectedImage && (\r\n            <Image\r\n              src={URL.createObjectURL(selectedImage)}\r\n              alt=\"Image Preview\"\r\n              maxH=\"400px\"\r\n              maxW=\"100%\"\r\n              objectFit=\"contain\"\r\n            />\r\n          )}\r\n        </ModalBody>\r\n        <ModalFooter justifyContent=\"center\">\r\n          <Button\r\n            colorScheme=\"blue\"\r\n            mr={3}\r\n            onClick={sendImage}\r\n            isLoading={loading}\r\n          >\r\n            Send Image\r\n          </Button>\r\n          <Button onClick={handleClose}>Close</Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ImagePreviewModel;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Box, Text, Flex } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  IconButton,\r\n  Spinner,\r\n  useToast,\r\n  useDisclosure,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  getSender,\r\n  getSenderFull,\r\n  getSenderImage,\r\n  formatLastSeen,\r\n} from \"../config/ChatLogics\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon, AttachmentIcon } from \"@chakra-ui/icons\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport EmojiInput from \"react-input-emoji\";\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport PersonalProfileModal from \"./PersonalProfile\";\r\nimport ImagePreviewModel from \"./ImagePreviewModel\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageloading, setImageLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const fileInputRef = useRef(null);\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n            isPic: false,\r\n            pic: \"\",\r\n          },\r\n          config\r\n        );\r\n        setFetchAgain(!fetchAgain);\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"join chat\", () => setFetchAgain(!fetchAgain));\r\n    const cleanup = () => {\r\n      socket.disconnect();\r\n      setFetchAgain(!fetchAgain);\r\n    };\r\n\r\n    window.addEventListener(\"beforeunload\", cleanup);\r\n    window.addEventListener(\"unload\", cleanup);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", cleanup);\r\n      window.removeEventListener(\"unload\", cleanup);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setFetchAgain(!fetchAgain);\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (text) => {\r\n    setNewMessage(text);\r\n  };\r\n  const handleImageUpload = (file) => {\r\n    setSelectedImage(file);\r\n    onOpen(); // Open the modal\r\n  };\r\n  const sendImage = async () => {\r\n    if (\r\n      selectedImage?.type === \"image/jpeg\" ||\r\n      selectedImage?.type === \"image/png\"\r\n    ) {\r\n      setImageLoading(true);\r\n      const data = new FormData();\r\n      data.append(\"file\", selectedImage);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"diixoyqta\");\r\n      const res = await fetch(\r\n        \"https://api.cloudinary.com/v1_1/diixoyqta/image/upload\",\r\n        {\r\n          method: \"post\",\r\n          body: data,\r\n        }\r\n      )\r\n        .then((res) => res.json())\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: \"Image\",\r\n            chatId: selectedChat,\r\n            isPic: true,\r\n            pic: res?.url,\r\n          },\r\n          config\r\n        );\r\n        onClose();\r\n        setFetchAgain(!fetchAgain);\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n        setImageLoading(false);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <Flex align=\"center\" justify=\"space-between\">\r\n                  <Box>\r\n                    <PersonalProfileModal\r\n                      user={getSenderImage(user, selectedChat.users)}\r\n                    >\r\n                      <Avatar\r\n                        src={getSenderImage(user, selectedChat.users)}\r\n                        alt=\"Profile\"\r\n                        boxSize={10}\r\n                        cursor={\"pointer\"}\r\n                      />\r\n                    </PersonalProfileModal>\r\n                  </Box>\r\n                  <Box flex=\"1\" ml={4}>\r\n                    <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n                      {getSender(user, selectedChat.users)}\r\n                    </Text>\r\n                    <Text fontSize=\"sm\" color=\"gray.500\">\r\n                      {getSenderFull(user, selectedChat.users).isActive\r\n                        ? \"Online\"\r\n                        : formatLastSeen(\r\n                            getSenderFull(user, selectedChat.users).lastSeen\r\n                          )}\r\n                    </Text>\r\n                  </Box>\r\n                </Flex>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              <Box\r\n                display={\"flex\"}\r\n                flexDirection={\"row\"}\r\n                bg=\"rgba(136, 136, 136, 0.281)\"\r\n                borderRadius=\"20px\" // Adjust the value as needed\r\n                p=\"1\" // Adjust the padding as needed\r\n              >\r\n                <Button\r\n                  borderRadius=\"full\"\r\n                  color=\"gray\"\r\n                  mt=\"1.5\"\r\n                  ml=\"2\" // Adjust the button text color as needed\r\n                  onClick={() => {\r\n                    document.getElementById(\"imageInput\").click();\r\n                  }}\r\n                >\r\n                  <AttachmentIcon />\r\n                </Button>\r\n                <input\r\n                  id=\"imageInput\"\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  style={{ display: \"none\" }}\r\n                  ref={fileInputRef}\r\n                  onChange={(e) => handleImageUpload(e.target.files[0])}\r\n                />\r\n                <EmojiInput\r\n                  value={newMessage}\r\n                  onChange={typingHandler}\r\n                  cleanOnEnter\r\n                  placeholder=\"Enter a message...\"\r\n                  flex=\"1\" // Adjust the flex property as needed\r\n                  ml=\"4\" // Adjust the margin-left as needed\r\n                  borderRadius=\"full\" // Adjust the input border radius as needed\r\n                />\r\n              </Box>\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          d=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          flex=\"1\"\r\n          bgGradient=\"linear-gradient(to right, white,#e8e8e8 )\"\r\n          width={\"100%\"}\r\n          borderRadius={\"2xl\"}\r\n        >\r\n          <Box textAlign=\"center\">\r\n            <Flex>\r\n              <Image\r\n                src=\"Favicon.png\"\r\n                alt=\"ChatApp Logo\"\r\n                boxSize=\"150px\"\r\n                mb={4}\r\n              />\r\n              <Text\r\n                fontSize=\"4xl\"\r\n                fontWeight={\"extrabold\"}\r\n                pb={3}\r\n                fontFamily=\"Work Sans\"\r\n                color=\"#32ccfe\"\r\n              >\r\n                ChatApp\r\n              </Text>\r\n            </Flex>\r\n            <Text\r\n              fontSize=\"2xl\"\r\n              fontWeight={\"bold\"}\r\n              pb={3}\r\n              fontFamily=\"Work Sans\"\r\n              color=\"#32ccfe\"\r\n            >\r\n              Let's Connect and Chat!\r\n            </Text>\r\n            <Text fontSize=\"lg\" color=\"#363232\" fontWeight={\"thin\"}>\r\n              Click on a user 👈 to Explore the world🌐 of conversations! 💬\r\n            </Text>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n      <ImagePreviewModel\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        selectedImage={selectedImage}\r\n        setSelectedImage={setSelectedImage}\r\n        fileInputRef={fileInputRef}\r\n        sendImage={sendImage}\r\n        loading={imageloading}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Box, Image, Text, Flex } from \"@chakra-ui/react\";\r\nconst ChatLoading = () => {\r\n  const [showLoading, setShowLoading] = useState(true);\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setShowLoading(false);\r\n    }, 2000);\r\n\r\n    // Clear the timer to avoid memory leaks\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n  return (\r\n    <>\r\n      {showLoading ? (\r\n        <Stack>\r\n          {[...Array(12)].map((_, index) => (\r\n            <Skeleton key={index} height=\"45px\" />\r\n          ))}\r\n        </Stack>\r\n      ) : (\r\n        <Box\r\n          d=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          flex=\"1\"\r\n          bgGradient=\"linear-gradient(to right, white,#e8e8e8 )\"\r\n          width={\"100%\"}\r\n          borderRadius={\"2xl\"}\r\n        >\r\n          <Box textAlign=\"center\">\r\n            <Flex>\r\n              <Image\r\n                src=\"Favicon.png\"\r\n                alt=\"ChatApp Logo\"\r\n                boxSize=\"150px\"\r\n                mb={4}\r\n              />\r\n              <Text\r\n                fontSize=\"4xl\"\r\n                fontWeight={\"extrabold\"}\r\n                pb={3}\r\n                fontFamily=\"Work Sans\"\r\n                color=\"#32ccfe\"\r\n              >\r\n                ChatApp\r\n              </Text>\r\n            </Flex>\r\n            <Text\r\n              fontSize=\"2xl\"\r\n              fontWeight={\"bold\"}\r\n              pb={3}\r\n              fontFamily=\"Work Sans\"\r\n              color=\"#32ccfe\"\r\n            >\r\n              Start Chatting Privately with Your Contact List\r\n            </Text>\r\n            <Text fontSize=\"lg\" color=\"#363232\" fontWeight={\"thin\"}>\r\n              Connect with friends and have private conversations in ChatApp.\r\n              Start a chat now!\r\n            </Text>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender, getSenderImage } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { ampmTime } from \"../config/ChatLogics\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const {\r\n    selectedChat,\r\n    setSelectedChat,\r\n    user,\r\n    chats,\r\n    setChats,\r\n    notification,\r\n    setNotification,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n  const selectChatFunc = (chat) => {\r\n    setSelectedChat(chat);\r\n    setNotification((prevNotifications) => {\r\n      const updatedNotifications = prevNotifications.filter(\r\n        (notificationChat) => notificationChat.chat._id !== chat._id\r\n      );\r\n\r\n      return updatedNotifications;\r\n    });\r\n  };\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n            id=\"newGroupChat\"\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats?.length > 0 ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => selectChatFunc(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat?._id === chat?._id ? \"#b4b4b4\" : \"#E8E8E8\"}\r\n                color={\"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <Avatar\r\n                      mt=\"7px\"\r\n                      mr={1}\r\n                      size=\"sm\"\r\n                      cursor=\"pointer\"\r\n                      name={\r\n                        !chat.isGroupChat\r\n                          ? getSender(loggedUser, chat.users)\r\n                          : chat.chatName\r\n                      }\r\n                      src={\r\n                        !chat.isGroupChat\r\n                          ? getSenderImage(loggedUser, chat.users)\r\n                          : chat.chatName\r\n                      }\r\n                    />\r\n                    <Box>\r\n                      <Text>\r\n                        {!chat.isGroupChat\r\n                          ? getSender(loggedUser, chat.users)\r\n                          : chat.chatName}\r\n                      </Text>\r\n                      {chat.latestMessage && (\r\n                        <Text fontSize=\"xs\">\r\n                          <b>{chat.latestMessage.sender.name} : </b>\r\n                          {chat.latestMessage.content.length > 50\r\n                            ? chat.latestMessage.content.substring(0, 51) +\r\n                              \"...\"\r\n                            : chat.latestMessage.content}\r\n                        </Text>\r\n                      )}\r\n                    </Box>\r\n                  </Box>\r\n                  {!notification?.isGroupChat && notification?.length > 0 && (\r\n                    <Box style={{ textAlign: \"center\" }}>\r\n                      <>\r\n                        {notification.filter(\r\n                          (notif) =>\r\n                            notif.sender?._id ===\r\n                              chat?.latestMessage?.sender?._id &&\r\n                            notif.chat?._id === chat?._id\r\n                        ).length > 0 && (\r\n                          <>\r\n                            <Text>\r\n                              {ampmTime(\r\n                                notification\r\n                                  .filter(\r\n                                    (notif) =>\r\n                                      notif.sender?._id ===\r\n                                        chat?.latestMessage?.sender?._id &&\r\n                                      notif.chat?._id === chat?._id\r\n                                  )\r\n                                  .reduce(\r\n                                    (latestCreatedAt, notif) =>\r\n                                      notif.createdAt > latestCreatedAt\r\n                                        ? notif.createdAt\r\n                                        : latestCreatedAt,\r\n                                    \"\"\r\n                                  )\r\n                              )}\r\n                            </Text>\r\n                            <Text\r\n                              borderRadius=\"50%\"\r\n                              width=\"25px\"\r\n                              textAlign=\"center\"\r\n                              background=\"gray\"\r\n                              color=\"white\"\r\n                              height=\"25px\"\r\n                            >\r\n                              {notification\r\n                                .filter(\r\n                                  (notif) =>\r\n                                    notif.sender?._id ===\r\n                                      chat?.latestMessage?.sender?._id &&\r\n                                    notif.chat?._id === chat?._id\r\n                                )\r\n                                .reduce(\r\n                                  (totalCount, notif) => totalCount + 1,\r\n                                  0\r\n                                )}\r\n                            </Text>\r\n                          </>\r\n                        )}\r\n                      </>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n  Input,\r\n  Flex,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [editedName, setEditedName] = useState(user.name);\r\n  const toast = useToast();\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [previewURL, setPreviewURL] = useState(null);\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n    setPreviewURL(URL.createObjectURL(file));\r\n  };\r\n  const handleEditClick = () => {\r\n    setEditing(!isEditing);\r\n  };\r\n\r\n  const handleNameChange = (e) => {\r\n    setEditedName(e.target.value);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    let res = {\r\n      url: user?.pic,\r\n    };\r\n    if (\r\n      selectedFile?.type === \"image/jpeg\" ||\r\n      selectedFile?.type === \"image/png\" ||\r\n      selectedFile === null\r\n    ) {\r\n      setPicLoading(true);\r\n      if (selectedFile !== null) {\r\n        const data = new FormData();\r\n        data.append(\"file\", selectedFile);\r\n        data.append(\"upload_preset\", \"chat-app\");\r\n        data.append(\"cloud_name\", \"diixoyqta\");\r\n        res = await fetch(\r\n          \"https://api.cloudinary.com/v1_1/diixoyqta/image/upload\",\r\n          {\r\n            method: \"post\",\r\n            body: data,\r\n          }\r\n        )\r\n          .then((res) => res.json())\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      }\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        const { data } = await axios.put(\r\n          \"/api/user/updateUser\",\r\n          {\r\n            _id: user._id,\r\n            name: editedName,\r\n            pic: res?.url,\r\n          },\r\n          config\r\n        );\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n        toast({\r\n          title: \"Updated Successful\",\r\n          status: \"success\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n        onClose();\r\n        setPicLoading(false);\r\n        setEditing(false);\r\n        window.location.reload();\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: error.response.data.message,\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  return (\r\n    <>\r\n      {children ? <span onClick={onOpen}>{children}</span> : \"\"}\r\n      <Modal\r\n        size=\"md\"\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered={false}\r\n        placement=\"right\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"25px\"\r\n            fontFamily=\"Work Sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            borderBottom=\"2px solid #ccc\"\r\n            pb={2}\r\n          >\r\n            Profile\r\n            <IconButton\r\n              icon={<EditIcon />}\r\n              onClick={handleEditClick}\r\n              variant=\"ghost\"\r\n              ml={2}\r\n            />\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Input\r\n              type=\"file\"\r\n              onChange={handleFileChange}\r\n              mb={4}\r\n              position=\"absolute\"\r\n              opacity=\"0\"\r\n              zIndex=\"-1\"\r\n              left=\"0\"\r\n              top=\"0\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              cursor=\"pointer\"\r\n              id=\"fileInput\"\r\n            />\r\n            {isEditing && (\r\n              <IconButton\r\n                icon={<EditIcon />}\r\n                onClick={() => document.getElementById(\"fileInput\").click()}\r\n                position=\"absolute\"\r\n                variant=\"solid\"\r\n                right={140}\r\n              />\r\n            )}\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"200px\"\r\n              src={previewURL || userInfo.pic}\r\n              alt=\"Image Preview\"\r\n              mb={4}\r\n              mx=\"auto\"\r\n              display=\"block\"\r\n            />\r\n            <Text fontSize=\"16px\" fontFamily=\"Work Sans\" mb={4}>\r\n              Your Name:{\" \"}\r\n              {isEditing ? (\r\n                <Flex align=\"center\">\r\n                  <Input\r\n                    value={editedName}\r\n                    onChange={handleNameChange}\r\n                    variant=\"flushed\"\r\n                  />\r\n                  <Text fontSize=\"14px\" color=\"gray.500\" ml={2}>\r\n                    {editedName.length}\r\n                  </Text>\r\n                </Flex>\r\n              ) : (\r\n                userInfo.name\r\n              )}\r\n            </Text>\r\n            <Text fontSize=\"11px\">\r\n              This is not your username or pin. This name will be visible to\r\n              your ChatApp.\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            {isEditing && (\r\n              <Button\r\n                colorScheme=\"teal\"\r\n                mr={3}\r\n                onClick={handleSave}\r\n                isLoading={picLoading}\r\n              >\r\n                Save\r\n              </Button>\r\n            )}\r\n            <Button\r\n              onClick={() => {\r\n                setEditedName(userInfo.name);\r\n                setEditing(false);\r\n                setPreviewURL(null);\r\n                onClose();\r\n              }}\r\n            >\r\n              {isEditing ? \"Cancel\" : \"Close\"}\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text, HStack } from \"@chakra-ui/layout\";\r\nimport { Image } from \"@chakra-ui/react\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = async () => {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n    await axios.put(\r\n      \"/api/user/updateUser\",\r\n      {\r\n        _id: user._id,\r\n        isActive: false,\r\n        lastSeen: new Date(),\r\n      },\r\n      config\r\n    );\r\n    toast({\r\n      title: \"Logged Out\",\r\n      status: \"success\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSearch();\r\n  }, [search]);\r\n\r\n  const accessChat = async (userId) => {\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen} id=\"searchUser\">\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <div id=\"chatApp\">\r\n          <HStack spacing=\"2\">\r\n            <Image src=\"Favicon.png\" alt=\"LiveChat Logo\" boxSize=\"50px\" />\r\n            <Text\r\n              fontSize=\"4xl\"\r\n              fontWeight={\"extrabold\"}\r\n              pb={3}\r\n              fontFamily=\"Work Sans\"\r\n              color=\"#32ccfe\"\r\n            >\r\n              ChatApp\r\n            </Text>\r\n          </HStack>\r\n        </div>\r\n        <div>\r\n          <Menu>\r\n            <div id=\"notification\" style={{ display: \"inline\" }}>\r\n              <MenuButton p={1}>\r\n                <NotificationBadge\r\n                  count={notification.length}\r\n                  effect={Effect.SCALE}\r\n                />\r\n                <BellIcon fontSize=\"2xl\" m={1} />\r\n              </MenuButton>\r\n            </div>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <div id=\"profileDrive\" style={{ display: \"inline\" }}>\r\n              <MenuButton\r\n                as={Button}\r\n                bg=\"white\"\r\n                rightIcon={<ChevronDownIcon />}\r\n              >\r\n                <Avatar\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={user.name}\r\n                  src={user.pic}\r\n                />\r\n              </MenuButton>\r\n            </div>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              {/* <Button onClick={handleSearch}>Go</Button> */}\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport \"driver.js/dist/driver.css\";\r\nimport { driver } from \"driver.js\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n  const startTour = () => {\r\n    const config = {\r\n      steps: [\r\n        {\r\n          element: \"#searchUser\",\r\n          popover: {\r\n            title: \"Search User\",\r\n            description:\r\n              \"Click here to search for a user and start ChatApp features.\",\r\n          },\r\n        },\r\n        {\r\n          element: \"#newGroupChat\",\r\n          popover: {\r\n            title: \"Create New Group+\",\r\n            description:\r\n              \"Click here to create a new group and start a chat with multiple users. Enter the group name and select members to initiate a group chat.\",\r\n            side: \"right\",\r\n            align: \"start\",\r\n          },\r\n        },\r\n        {\r\n          element: \"#chatApp\",\r\n          popover: {\r\n            title: \"ChatApp\",\r\n            description:\r\n              \"Stay connected with your contacts, start one-on-one chats, and manage your messages.\",\r\n            side: \"right\",\r\n            align: \"start\",\r\n          },\r\n        },\r\n        {\r\n          element: \"#notification\",\r\n          popover: {\r\n            title: \"Notification Show\",\r\n            description:\r\n              \"Click here to view your notifications. Stay updated on new messages, friend requests, and other important updates.\",\r\n            side: \"left\",\r\n            align: \"start\",\r\n          },\r\n        },\r\n        {\r\n          element: \"#profileDrive\",\r\n          popover: {\r\n            title: \"Profile\",\r\n            description:\r\n              \"Click here to access your profile. Update your personal information, manage settings, and customize your ChatApp experience.\",\r\n            side: \"bottom\",\r\n            align: \"start\",\r\n          },\r\n        },\r\n        {\r\n          popover: {\r\n            title: \"'Happy Chatting!'\",\r\n            description:\r\n              \"'Happy Chatting!' to send a friendly message in the ChatApp.\",\r\n          },\r\n        },\r\n        // Add more steps as needed\r\n      ],\r\n      allowClose: true,\r\n      // Add other configuration options as needed\r\n    };\r\n\r\n    const tourInstance = driver(config);\r\n\r\n    // Start the tour directly\r\n    tourInstance.drive();\r\n  };\r\n  useEffect(() => {\r\n    if (user?.isLogin === 1) {\r\n      startTour();\r\n    }\r\n  }, []);\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  useToast,\r\n  Container,\r\n  HStack,\r\n  Box,\r\n  Image,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const gotoSignUp = () => {\r\n    history.push(\"signup\");\r\n  };\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <HStack spacing=\"2\">\r\n          <Image src=\"Favicon.png\" alt=\"LiveChat Logo\" boxSize=\"50px\" />\r\n          <Text\r\n            fontSize=\"4xl\"\r\n            fontWeight={\"extrabold\"}\r\n            pb={3}\r\n            fontFamily=\"Work Sans\"\r\n            color=\"#32ccfe\"\r\n          >\r\n            ChatApp\r\n          </Text>\r\n        </HStack>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <VStack spacing=\"10px\">\r\n          <FormControl id=\"email\" isRequired>\r\n            <FormLabel>Email Address</FormLabel>\r\n            <Input\r\n              value={email}\r\n              type=\"email\"\r\n              placeholder=\"Enter Your Email Address\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"password\" isRequired>\r\n            <FormLabel>Password</FormLabel>\r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                type={show ? \"text\" : \"password\"}\r\n                placeholder=\"Enter password\"\r\n              />\r\n              <InputRightElement width=\"4.5rem\">\r\n                <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                  {show ? \"Hide\" : \"Show\"}\r\n                </Button>\r\n              </InputRightElement>\r\n            </InputGroup>\r\n          </FormControl>\r\n          <Button\r\n            colorScheme=\"blue\"\r\n            width=\"100%\"\r\n            style={{ marginTop: 15 }}\r\n            onClick={submitHandler}\r\n            isLoading={loading}\r\n          >\r\n            Login\r\n          </Button>\r\n        </VStack>\r\n        <Text textAlign={\"center\"}>\r\n          You have no registered yet?{\" \"}\r\n          <span\r\n            style={{\r\n              color: \"#32ccfe\",\r\n              cursor: \"pointer\",\r\n              textDecorationLine: \"underline\",\r\n            }}\r\n            onClick={() => {\r\n              gotoSignUp();\r\n            }}\r\n          >\r\n            Register\r\n          </span>\r\n        </Text>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { Container, HStack, Box, Image, Text } from \"@chakra-ui/react\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { CheckIcon, CloseIcon } from \"@chakra-ui/icons\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const [emailLoading, setEmailLoading] = useState(false);\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [otp, setOtp] = useState();\r\n  const [sentOtp, setSentsetOtp] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [otpIcon, setOtpIcon] = useState(null);\r\n  const [picLoading, setPicLoading] = useState(false);\r\n  const [countdown, setCountdown] = useState(120);\r\n  const timerIdRef = useRef(null);\r\n\r\n  const startCountdown = () => {\r\n    timerIdRef.current = setInterval(() => {\r\n      setCountdown((prevCountdown) => {\r\n        if (prevCountdown > 0) {\r\n          return prevCountdown - 1;\r\n        } else {\r\n          resetCountdown();\r\n          return 0;\r\n        }\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  const resetCountdown = () => {\r\n    setSentsetOtp(\"842093\");\r\n    clearInterval(timerIdRef.current);\r\n    setCountdown(60);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => clearInterval(timerIdRef.current);\r\n  }, []);\r\n\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  };\r\n  const generateNumericOTP = () => {\r\n    const minDigit = 100000; // Minimum value for a 6-digit number\r\n    const maxDigit = 999999; // Maximum value for a 6-digit number\r\n\r\n    const randomNumericOTP =\r\n      Math.floor(Math.random() * (maxDigit - minDigit + 1)) + minDigit;\r\n\r\n    return String(randomNumericOTP);\r\n  };\r\n\r\n  // Example usage:\r\n  const randomNumericOTP = generateNumericOTP();\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword || !otp) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    } else if (!emailRegex.test(email)) {\r\n      toast({\r\n        title: \"Invalid Email\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    } else if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    } else if (otp !== sentOtp) {\r\n      toast({\r\n        title: \"Please Enter the correct OTP\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      setCountdown(\"120\");\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"diixoyqta\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/diixoyqta/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleSendOtp = async () => {\r\n    if (!name || !email) {\r\n      toast({\r\n        title: \"Please Fill Name Field and email\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    } else if (!emailRegex.test(email)) {\r\n      toast({\r\n        title: \"Invalid Email\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    setEmailLoading(true);\r\n    setSentsetOtp(randomNumericOTP);\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"/api/OTP/sendOTP\",\r\n        {\r\n          name,\r\n          email,\r\n          otp: randomNumericOTP,\r\n        },\r\n        config\r\n      );\r\n      if (data.success === true) {\r\n        toast({\r\n          title: \"Email sent successfully\",\r\n          status: \"success\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n        // Start the countdown timer after a successful OTP send\r\n        startCountdown();\r\n      } else {\r\n        toast({\r\n          title: data.message,\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n      setEmailLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setEmailLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (otp?.length === 6 && otp === sentOtp) {\r\n      setOtpIcon(<CheckIcon />);\r\n    } else if (otp?.length >= 6) {\r\n      setOtpIcon(<CloseIcon />);\r\n    } else {\r\n      setOtpIcon(null);\r\n    }\r\n  }, [otp || sentOtp]);\r\n  const gotoLogin = () => {\r\n    history.push(\"/login\");\r\n  };\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <HStack spacing=\"2\">\r\n          <Image src=\"Favicon.png\" alt=\"LiveChat Logo\" boxSize=\"50px\" />\r\n          <Text\r\n            fontSize=\"4xl\"\r\n            fontWeight={\"extrabold\"}\r\n            pb={3}\r\n            fontFamily=\"Work Sans\"\r\n            color=\"#32ccfe\"\r\n          >\r\n            ChatApp\r\n          </Text>\r\n        </HStack>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <VStack spacing=\"5px\">\r\n          <FormControl id=\"first-name\" isRequired>\r\n            <FormLabel>Name</FormLabel>\r\n            <Input\r\n              placeholder=\"Enter Your Name\"\r\n              onChange={(e) => setName(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"email\" isRequired>\r\n            <FormLabel>Email Address</FormLabel>\r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                type=\"email\"\r\n                placeholder=\"Enter Your Email Address\"\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                isDisabled={countdown < 60}\r\n              />\r\n              <InputRightElement width=\"5.5rem\">\r\n                <Button\r\n                  h=\"1.75rem\"\r\n                  size=\"sm\"\r\n                  mr=\"0.5rem\"\r\n                  onClick={handleSendOtp}\r\n                  isLoading={emailLoading}\r\n                  isDisabled={countdown < 60}\r\n                >\r\n                  {countdown < 60 ? `Resend OTP in ${countdown}s` : \"Send OTP\"}\r\n                </Button>\r\n              </InputRightElement>\r\n            </InputGroup>\r\n          </FormControl>\r\n          <FormControl id=\"otp\" isRequired>\r\n            <FormLabel>Enter OTP</FormLabel>\r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                type={\"text\"}\r\n                placeholder=\"Enter the OTP\"\r\n                onChange={(e) => setOtp(e.target.value)}\r\n              />\r\n              {otpIcon !== null && (\r\n                <InputRightElement width=\"4.5rem\">\r\n                  <Button\r\n                    h=\"1.75rem\"\r\n                    size=\"sm\"\r\n                    color={otp === sentOtp ? \"green\" : \"red\"}\r\n                  >\r\n                    {otpIcon}\r\n                  </Button>\r\n                </InputRightElement>\r\n              )}\r\n            </InputGroup>\r\n          </FormControl>\r\n          <FormControl id=\"password\" isRequired>\r\n            <FormLabel>Password</FormLabel>\r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                type={show ? \"text\" : \"password\"}\r\n                placeholder=\"Enter Password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <InputRightElement width=\"4.5rem\">\r\n                <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                  {show ? \"Hide\" : \"Show\"}\r\n                </Button>\r\n              </InputRightElement>\r\n            </InputGroup>\r\n          </FormControl>\r\n          <FormControl id=\"password\" isRequired>\r\n            <FormLabel>Confirm Password</FormLabel>\r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                type={show ? \"text\" : \"password\"}\r\n                placeholder=\"Confirm password\"\r\n                onChange={(e) => setConfirmpassword(e.target.value)}\r\n              />\r\n              <InputRightElement width=\"4.5rem\">\r\n                <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                  {show ? \"Hide\" : \"Show\"}\r\n                </Button>\r\n              </InputRightElement>\r\n            </InputGroup>\r\n          </FormControl>\r\n          <FormControl id=\"pic\">\r\n            <FormLabel>Upload your Picture</FormLabel>\r\n            <Input\r\n              type=\"file\"\r\n              p={1.5}\r\n              accept=\"image/*\"\r\n              onChange={(e) => postDetails(e.target.files[0])}\r\n            />\r\n          </FormControl>\r\n          <Button\r\n            colorScheme=\"blue\"\r\n            width=\"100%\"\r\n            style={{ marginTop: 15 }}\r\n            onClick={submitHandler}\r\n            isLoading={picLoading}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n        </VStack>\r\n        <Text textAlign={\"center\"}>\r\n          You have Already Registered?{\" \"}\r\n          <span\r\n            style={{\r\n              color: \"#32ccfe\",\r\n              cursor: \"pointer\",\r\n              textDecorationLine: \"underline\",\r\n            }}\r\n            onClick={() => {\r\n              gotoLogin();\r\n            }}\r\n          >\r\n            Login\r\n          </span>\r\n        </Text>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import \"./App.css\";\r\n// import Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\nimport Login from \"./components/Authentication/Login\";\r\nimport Signup from \"./components/Authentication/Signup\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Route path=\"/\" component={Homepage} exact /> */}\r\n      <Route path=\"/login\" component={Login} exact />\r\n      <Route path=\"/signup\" component={Signup} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}